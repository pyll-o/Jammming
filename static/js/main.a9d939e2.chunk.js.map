{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","containers/TrackContainer.js","components/TrackList/TrackList.js","components/PlaylistListItem/PlaylistListItem.js","containers/PlaylistListItemContainer.js","components/PlaylistList/PlaylistList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","containers/PlaylistContainer.js","components/AppComp/AppComp.js","util/Spotify.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","searchPhrase","handleSearchChange","handleClick","playlists","hasCheckedForPlaylists","searchIcon","icon","faSearch","size","listIcon","faList","className","placeholder","value","onChange","length","onClick","Track","track","isInPlaylist","play","isPlayed","isTrackPlayed","titleLink","artistLink","albumLink","playButton","faPlay","pauseButton","faPause","title","artist","album","loop","id","src","preview","Math","floor","random","doubledInPlaylist","TrackContainer","state","bind","this","removeTrack","addTrack","setState","pauseTrack","playTrack","window","open","url","artistUrl","albumUrl","prevProps","prevState","React","Component","TrackList","tracks","map","key","PlaylistListItem","playlist","handleRemove","editPlaylist","areYouSure","deleteImminent","linkToPlaylist","isEdited","isCurrentPlaylistOnList","isSavedPlaylistAltered","trashIcon","faTrash","editIcon","faEdit","questionIcon","faQuestion","exclamationIcon","faExclamation","name","images","alt","PlaylistListItemContainer","getPlaylistDetails","t","setTimeout","removePlaylist","viewedInDetail","clearTimeout","PlaylistList","SearchResults","style","display","paddingTop","height","propTypes","PropTypes","object","isRequired","func","bool","Playlist","playlistName","handleListNameChange","savePlaylist","clearPlaylist","handleDelete","saveIcon","faSave","timesIcon","faTimes","PlaylistContainer","AppComp","playlistTracks","searchTracks","search","Spotify","clientId","process","accessToken","tokenExpiry","redirectURI","generateURLState","sessionStorage","urlState","toString","getAccessToken","location","href","match","tokenExpiryDate","Date","now","history","pushState","getUserId","fetch","headers","then","response","ok","json","jsonResponse","getUserPlaylists","playlistId","createPlaylist","userId","jsonBody","JSON","stringify","method","body","addPlaylist","uriArr","uris","spotifyLogin","updatePlaylist","url1","url2","encodeURIComponent","phrase","items","App","handleSearchResponse","getPlaylists","handlePlaylistDetails","target","needsLogging","searchTracksFiltered","artists","URI","uri","preview_url","external_urls","spotify","filter","plTrack","includes","item","trackArr","idArr","forEach","playlistTrack","console","log","index","indexOf","total","editedPlaylistId","parse","playlistToRemove","playlistToDeleteId","playlistToRemoveId","playlistToEdit","playlistsArr","oldEditedPlaylistArr","playlistToEditId","trackToAdd","prev","document","getElementById","pause","trackToRemove","searchArr","updatedPlaylistTracks","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9d939e2.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SearchBar.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { faList } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function SearchBar(props) {\r\n    const { searchPhrase, handleSearchChange, handleClick, playlists, hasCheckedForPlaylists } = props;\r\n    const searchIcon = <FontAwesomeIcon icon={faSearch} size='2x' />;\r\n    const listIcon = <FontAwesomeIcon icon={faList} size='2x' />;\r\n    return (\r\n        <div className=\"SearchBar\">\r\n            <input \r\n                placeholder=\"Enter A Song, Album, or Artist\" \r\n                value={searchPhrase}\r\n                onChange={handleSearchChange}\r\n            />\r\n            <button \r\n                className={(searchPhrase || (playlists.length === 0 && !hasCheckedForPlaylists)) ? 'SearchButton' : 'SearchButton-inactive'} \r\n                onClick={(searchPhrase || (playlists.length === 0 && !hasCheckedForPlaylists)) ? handleClick : null}\r\n            >\r\n                {(searchPhrase || playlists.length > 0 || hasCheckedForPlaylists) ? searchIcon : listIcon}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n    searchPhrase: PropTypes.string.isRequired,\r\n    handleSearchChange: PropTypes.func.isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n    playlists: PropTypes.array.isRequired,\r\n    hasCheckedForPlaylists: PropTypes.bool.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Track.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay } from '@fortawesome/free-solid-svg-icons';\r\nimport { faPause } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Track(props) {\r\n    const { track, isInPlaylist, handleClick, play, isPlayed, isTrackPlayed, titleLink, artistLink, albumLink } = props;\r\n    const playButton = <FontAwesomeIcon icon={faPlay} size='xs' />;\r\n    const pauseButton = <FontAwesomeIcon icon={faPause} size='xs' />;\r\n    return (\r\n        <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n                <h3 className='Track-link' onClick={titleLink}>{track.title}</h3>\r\n                <p><span className='Track-link' onClick={artistLink}>{track.artist}</span> | <span className='Track-link' onClick={albumLink}>{track.album}</span></p>\r\n            </div>\r\n            <audio \r\n                loop id={track.id} \r\n                src={track.preview ? track.preview : `https://bigsoundbank.com/UPLOAD/mp3/0${Math.floor((Math.random() * 900) + 100)}.mp3`}\r\n            >\r\n                Your browser does not support the audio element\r\n            </audio>\r\n            <button\r\n                className={(isPlayed || !isTrackPlayed) ? (track.preview ? 'Track-action' : 'Track-action red') : 'Track-action-disabled'}\r\n                onClick={(isPlayed || !isTrackPlayed) ? play : null}\r\n            >\r\n                {isPlayed ? pauseButton : playButton}\r\n            </button>\r\n            <button \r\n                className={(track.doubledInPlaylist && !isInPlaylist) ? 'Track-action-disabled' : 'Track-action'} \r\n                onClick={handleClick}\r\n            >\r\n                {isInPlaylist ? '-' : '+'}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nTrack.propTypes = {\r\n    track: PropTypes.object.isRequired,\r\n    isInPlaylist: PropTypes.bool.isRequired,\r\n    handleClick: PropTypes.func.isRequired,\r\n    play: PropTypes.func.isRequired,\r\n    isPlayed: PropTypes.bool.isRequired,\r\n    isTrackPlayed: PropTypes.bool.isRequired,\r\n    titleLink: PropTypes.func.isRequired,\r\n    artistLink: PropTypes.func.isRequired,\r\n    albumLink: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Track from '../components/Track/Track';\r\n\r\nexport default class TrackContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPlayed: false,\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.play = this.play.bind(this);\r\n        this.titleLink = this.titleLink.bind(this);\r\n        this.albumLink = this.albumLink.bind(this);\r\n        this.artistLink = this.artistLink.bind(this);\r\n    }\r\n    handleClick() {\r\n        if (!this.props.isInPlaylist) {\r\n            this.props.addTrack(this.props.track);\r\n        } else {\r\n            this.props.removeTrack(this.props.track);\r\n        }\r\n    }\r\n    play() {\r\n        if (!this.state.isPlayed) {            \r\n            this.setState({\r\n                isPlayed: true\r\n            }, () => {\r\n                this.props.playTrack(this.props.track);\r\n            });             \r\n        } else {            \r\n            this.setState({\r\n                isPlayed: false\r\n            }, () => {\r\n                this.props.pauseTrack(this.props.track);\r\n            });            \r\n        };    \r\n    }\r\n    titleLink() {\r\n        window.open(this.props.track.url);\r\n    }\r\n    artistLink() {\r\n        window.open(this.props.track.artistUrl);\r\n    }\r\n    albumLink() {\r\n        window.open(this.props.track.albumUrl);\r\n    }\r\n    render() {\r\n        return (\r\n            <Track \r\n                track={this.props.track}\r\n                isInPlaylist={this.props.isInPlaylist}\r\n                handleClick={this.handleClick}\r\n                play={this.play}\r\n                isPlayed={this.state.isPlayed}\r\n                isTrackPlayed={this.props.isTrackPlayed}\r\n                titleLink={this.titleLink}\r\n                artistLink={this.artistLink}\r\n                albumLink={this.albumLink}\r\n            />\r\n        );\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if ((prevProps.isTrackPlayed !== this.props.isTrackPlayed) && prevState.isPlayed && prevProps.isTrackPlayed) {\r\n            this.setState({\r\n                isPlayed: false\r\n            }, () => {\r\n                this.props.pauseTrack(this.props.track);\r\n            });\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.props.isInPlaylist && this.state.isPlayed) {\r\n            this.props.pauseTrack(this.props.track);\r\n        }\r\n    }\r\n};\r\n\r\nTrackContainer.propTypes = {\r\n    addTrack: PropTypes.func,\r\n    isInPlaylist: PropTypes.bool.isRequired,\r\n    track: PropTypes.object.isRequired,\r\n    removeTrack: PropTypes.func,\r\n    playTrack: PropTypes.func.isRequired,\r\n    pauseTrack: PropTypes.func.isRequired,\r\n    isTrackPlayed: PropTypes.bool.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './TrackList.css';\r\nimport TrackContainer from '../../containers/TrackContainer';\r\n\r\nexport default function TrackList(props) {\r\n    const { tracks, isInPlaylist, addTrack, removeTrack, playTrack, pauseTrack, isTrackPlayed } = props;\r\n    return (\r\n        <div className=\"TrackList\">\r\n            {tracks.map(track => {\r\n                return <TrackContainer\r\n                    track={track}                    \r\n                    key={track.id}                    \r\n                    isInPlaylist={isInPlaylist}\r\n                    addTrack={addTrack}\r\n                    removeTrack={removeTrack}\r\n                    playTrack={playTrack}\r\n                    pauseTrack={pauseTrack}\r\n                    isTrackPlayed={isTrackPlayed}\r\n                />\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nTrackList.propTypes = {\r\n    tracks: PropTypes.array,\r\n    isInPlaylist: PropTypes.bool.isRequired,\r\n    addTrack: PropTypes.func,\r\n    removeTrack: PropTypes.func,\r\n    playTrack: PropTypes.func.isRequired,\r\n    pauseTrack: PropTypes.func.isRequired,\r\n    isTrackPlayed: PropTypes.bool.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './PlaylistListItem.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit, faTrash, faQuestion, faExclamation } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function PlaylistListItem(props) {\r\n    const { playlist, handleRemove, editPlaylist, areYouSure, deleteImminent, linkToPlaylist, isEdited, isCurrentPlaylistOnList, isSavedPlaylistAltered } = props;\r\n    const trashIcon = <FontAwesomeIcon icon={faTrash} size='xs' />;\r\n    const editIcon = <FontAwesomeIcon icon={faEdit} size='xs' />;\r\n    const questionIcon = <FontAwesomeIcon icon={faQuestion} size='xs' />;\r\n    const exclamationIcon = <FontAwesomeIcon icon={faExclamation} size='xs' />;\r\n    return (        \r\n        <div className=\"PlaylistListItem\">\r\n            <div className=\"Playlist-information\">\r\n                <h3 className='PlaylistListItem-link' onClick={linkToPlaylist}>{playlist.name}</h3>\r\n                <p>Number of tracks: {playlist.tracks}</p>\r\n            </div>\r\n            <div className='img-container'>\r\n                <img\r\n                    src={(playlist.images.length > 0) ? playlist.images[0].url : ''}\r\n                    alt=''\r\n                    onClick={linkToPlaylist}\r\n                />\r\n            </div> \r\n            <button \r\n                className={isEdited ? 'Playlist-action-disabled' : 'Playlist-action'}\r\n                onClick={!isEdited ? handleRemove : null}\r\n            >\r\n                {(areYouSure || deleteImminent) ? (deleteImminent ? exclamationIcon : questionIcon) : trashIcon}\r\n            </button>\r\n            <button \r\n                className={(areYouSure || deleteImminent || isEdited || ((isCurrentPlaylistOnList && isSavedPlaylistAltered))) ? 'Playlist-action-disabled' :'Playlist-action'}\r\n                onClick={(isEdited || ((isCurrentPlaylistOnList && isSavedPlaylistAltered))) ? null : editPlaylist}\r\n            >\r\n                {editIcon}\r\n            </button>\r\n        </div>        \r\n    );\r\n};\r\n\r\nPlaylistListItem.propTypes = {\r\n    playlist: PropTypes.object.isRequired,\r\n    editPlaylist: PropTypes.func.isRequired,\r\n    areYouSure: PropTypes.bool.isRequired,\r\n    deleteImminent: PropTypes.bool.isRequired,\r\n    handleRemove: PropTypes.func.isRequired,\r\n    linkToPlaylist: PropTypes.func.isRequired,\r\n    isEdited: PropTypes.bool.isRequired,\r\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired,\r\n    isSavedPlaylistAltered: PropTypes.bool.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PlaylistListItem from '../components/PlaylistListItem/PlaylistListItem';\r\n\r\nexport default class PlaylistListItemContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            areYouSure: false,\r\n            deleteImminent: false,\r\n        };\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n        this.editPlaylist = this.editPlaylist.bind(this);\r\n        this.linkToPlaylist = this.linkToPlaylist.bind(this);\r\n    }   \r\n    linkToPlaylist() {\r\n        window.open(this.props.playlist.url);\r\n    }\r\n    editPlaylist() {\r\n       this.props.getPlaylistDetails(this.props.playlist);\r\n    }\r\n    handleRemove() {\r\n        if (!this.state.areYouSure && !this.state.deleteImminent) {\r\n            this.setState({\r\n                areYouSure: true,\r\n            }, () => {\r\n                this.t = setTimeout(() => {\r\n                    this.setState({\r\n                        areYouSure: false\r\n                    })\r\n                }, 5000);\r\n            });\r\n        } else if (this.state.areYouSure && !this.state.deleteImminent) {\r\n            this.setState({\r\n                deleteImminent: true\r\n            }, () => {\r\n                this.t = setTimeout(() => {\r\n                    this.props.removePlaylist(this.props.playlist);\r\n                }, 3000);\r\n            });\r\n        } else if (this.state.deleteImminent) {\r\n            this.setState({\r\n                deleteImminent: false,\r\n                areYouSure: false\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <PlaylistListItem\r\n                playlist={this.props.playlist}\r\n                areYouSure={this.state.areYouSure}\r\n                deleteImminent={this.state.deleteImminent}\r\n                handleRemove={this.handleRemove}\r\n                editPlaylist={this.editPlaylist}\r\n                linkToPlaylist={this.linkToPlaylist}\r\n                isCurrentPlaylistOnList={this.props.isCurrentPlaylistOnList}\r\n                isSavedPlaylistAltered={this.props.isSavedPlaylistAltered}\r\n                isEdited={this.props.playlist.viewedInDetail}\r\n            />\r\n        );\r\n    };\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.areYouSure && !prevState.deleteImminent) {\r\n            clearTimeout(this.t);\r\n        } else if (prevState.deleteImminent) {\r\n            clearTimeout(this.t);\r\n        }\r\n    }\r\n};\r\n\r\nPlaylistListItem.propTypes = {\r\n    playlist: PropTypes.object.isRequired,\r\n    removePlaylist: PropTypes.func,\r\n    getPlaylistDetails: PropTypes.func,\r\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired,\r\n    isSavedPlaylistAltered: PropTypes.bool.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './PlaylistList.css';\r\nimport PlaylistListItemContainer from '../../containers/PlaylistListItemContainer';\r\n\r\nexport default function PlaylistList(props) {\r\n    const { playlists, removePlaylist, getPlaylistDetails, isSavedPlaylistAltered, isCurrentPlaylistOnList } = props;\r\n    return (\r\n        <div className='PlaylistList'>\r\n            {playlists.map(playlist => {\r\n                return (\r\n                    <PlaylistListItemContainer\r\n                        playlist={playlist}\r\n                        key={playlist.id}\r\n                        removePlaylist={removePlaylist}\r\n                        getPlaylistDetails={getPlaylistDetails}\r\n                        isSavedPlaylistAltered={isSavedPlaylistAltered}\r\n                        isCurrentPlaylistOnList={isCurrentPlaylistOnList}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nPlaylistList.propTypes = {\r\n    playlists: PropTypes.array.isRequired,\r\n    removePlaylist: PropTypes.func.isRequired,\r\n    getPlaylistDetails: PropTypes.func.isRequired,\r\n    isSavedPlaylistAltered: PropTypes.bool.isRequired,\r\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport PlaylistList from '../PlaylistList/PlaylistList';\r\n\r\nexport default function SearchResults(props) {\r\n    const { tracks, addTrack, playTrack, pauseTrack, isTrackPlayed, playlists, removePlaylist, hasCheckedForPlaylists, getPlaylistDetails, isCurrentPlaylistOnList, isSavedPlaylistAltered } = props;\r\n    return (\r\n        <div \r\n            className=\"SearchResults\"\r\n            style={(tracks.length === 0 && playlists.length === 0 && !hasCheckedForPlaylists) ? {display: 'none'} : {}}\r\n        >\r\n            <h2>{(tracks.length === 0) ? 'No search results' : 'Search Results:'}</h2>\r\n            <div \r\n            className='SearchResults-tracklist'\r\n            style={(tracks.length === 0) ? {display: 'none'} : {}}\r\n            >\r\n                <TrackList \r\n                    tracks={tracks}\r\n                    isInPlaylist={false}\r\n                    addTrack={addTrack}\r\n                    playTrack={playTrack}\r\n                    pauseTrack={pauseTrack}\r\n                    isTrackPlayed={isTrackPlayed}\r\n                />\r\n            </div>\r\n            <h2 style={{paddingTop: '.88rem'}}>\r\n                {(playlists.length === 0) ? 'No playlists to display' : 'My Playlists:'}\r\n            </h2>\r\n            <div \r\n                className='SearchResults-playlists'\r\n                style={(tracks.length === 0) ? {height: '840px'} : {}}\r\n            >\r\n                <PlaylistList\r\n                    playlists={playlists}\r\n                    removePlaylist={removePlaylist}\r\n                    getPlaylistDetails={getPlaylistDetails}\r\n                    isSavedPlaylistAltered={isSavedPlaylistAltered}\r\n                    isCurrentPlaylistOnList={isCurrentPlaylistOnList}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSearchResults.propTypes = {\r\n    tracks: PropTypes.array.isRequired,\r\n    addTrack: PropTypes.func.isRequired,\r\n    playTrack: PropTypes.func.isRequired,\r\n    pauseTrack: PropTypes.func.isRequired,\r\n    isTrackPlayed: PropTypes.bool.isRequired,\r\n    playlists: PropTypes.array.isRequired,\r\n    removePlaylist: PropTypes.func.isRequired,\r\n    hasCheckedForPlaylists: PropTypes.bool.isRequired,\r\n    getPlaylistDetails: PropTypes.func.isRequired,\r\n    isSavedPlaylistAltered: PropTypes.bool.isRequired,\r\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave, faTimes, faTrash, faQuestion, faExclamation } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Playlist(props) {\r\n    const { tracks, playlistName, handleListNameChange, removeTrack, savePlaylist, playTrack, pauseTrack, isTrackPlayed, clearPlaylist, isCurrentPlaylistOnList, isSavedPlaylistAltered, handleDelete, areYouSure, deleteImminent } = props;\r\n    const saveIcon = <FontAwesomeIcon icon={faSave} />;\r\n    const timesIcon = <FontAwesomeIcon icon={faTimes} />;\r\n    const trashIcon = <FontAwesomeIcon icon={faTrash} />;\r\n    const questionIcon = <FontAwesomeIcon icon={faQuestion} />;\r\n    const exclamationIcon = <FontAwesomeIcon icon={faExclamation} />;\r\n    return (\r\n        <div \r\n            className=\"Playlist\"\r\n            style={(tracks.length === 0) ? {display: 'none'} : {}}\r\n        >\r\n            <div className='Playlist-title'>\r\n                <input \r\n                    value={playlistName} \r\n                    placeholder='New Playlist'\r\n                    onChange={handleListNameChange}\r\n                />\r\n                <button                    \r\n                    className={(tracks.length === 0 && !playlistName) ? 'Playlist-title-button-disabled' : 'Playlist-title-button'}\r\n                    onClick={clearPlaylist}\r\n                >\r\n                    {timesIcon}\r\n                </button>\r\n                <button\r\n                    className={!isCurrentPlaylistOnList ? 'Playlist-title-button-disabled' : 'Playlist-title-button'}\r\n                    onClick={!isCurrentPlaylistOnList ? null : handleDelete}\r\n                >\r\n                    {(areYouSure || deleteImminent) ? (deleteImminent ? exclamationIcon : questionIcon) : trashIcon}\r\n                </button>\r\n                <button \r\n                    className={(tracks.length === 0 || !playlistName || (isCurrentPlaylistOnList && !isSavedPlaylistAltered)) ? 'Playlist-title-button-disabled' : 'Playlist-title-button'}\r\n                    onClick={(tracks.length === 0 || !playlistName || (isCurrentPlaylistOnList && !isSavedPlaylistAltered)) ? null : savePlaylist}\r\n                >\r\n                    {saveIcon}\r\n                </button>\r\n            </div>\r\n            <div\r\n                className='Playlist-tracklist'\r\n            >\r\n                <TrackList\r\n                    tracks={tracks}\r\n                    isInPlaylist={true}\r\n                    removeTrack={removeTrack}\r\n                    playTrack={playTrack}\r\n                    pauseTrack={pauseTrack}\r\n                    isTrackPlayed={isTrackPlayed}\r\n                />\r\n            </div>     \r\n        </div>\r\n    );\r\n};\r\n\r\nPlaylist.propTypes = {\r\n    tracks: PropTypes.array.isRequired,\r\n    playlistName: PropTypes.string.isRequired,\r\n    handleListNameChange: PropTypes.func.isRequired,\r\n    removeTrack: PropTypes.func.isRequired,\r\n    savePlaylist: PropTypes.func.isRequired,\r\n    playTrack: PropTypes.func.isRequired,\r\n    pauseTrack: PropTypes.func.isRequired,\r\n    isTrackPlayed: PropTypes.bool.isRequired,\r\n    clearPlaylist: PropTypes.func.isRequired,\r\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired,\r\n    isSavedPlaylistAltered: PropTypes.bool.isRequired,\r\n    handleDelete: PropTypes.func.isRequired,\r\n    areYouSure: PropTypes.bool.isRequired,\r\n    deleteImminent: PropTypes.bool.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Playlist from '../components/Playlist/Playlist';\r\n\r\nexport default class PlaylistContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      areYouSure: false,\r\n      deleteImminent: false\r\n    };\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n  }\r\n  handleDelete() {\r\n    if (!this.state.areYouSure && !this.state.deleteImminent) {\r\n      this.setState({\r\n        areYouSure: true,\r\n      }, () => {\r\n        this.t = setTimeout(() => {\r\n          this.setState({\r\n            areYouSure: false\r\n          })\r\n        }, 5000);\r\n      });\r\n    } else if (this.state.areYouSure && !this.state.deleteImminent) {\r\n      this.setState({\r\n        deleteImminent: true\r\n      }, () => {\r\n        this.t = setTimeout(() => {\r\n          this.props.removePlaylist('current');\r\n        }, 3000);\r\n      });\r\n    } else if (this.state.deleteImminent) {\r\n      this.setState({\r\n        deleteImminent: false,\r\n        areYouSure: false\r\n      });\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <Playlist\r\n        tracks={this.props.tracks}\r\n        playlistName={this.props.playlistName}\r\n        handleListNameChange={this.props.handleListNameChange}\r\n        removeTrack={this.props.removeTrack}\r\n        savePlaylist={this.props.savePlaylist}\r\n        playTrack={this.props.playTrack}\r\n        pauseTrack={this.props.pauseTrack} \r\n        isTrackPlayed={this.props.isTrackPlayed}\r\n        clearPlaylist={this.props.clearPlaylist}\r\n        isCurrentPlaylistOnList={this.props.isCurrentPlaylistOnList}\r\n        isSavedPlaylistAltered={this.props.isSavedPlaylistAltered}\r\n        handleDelete={this.handleDelete}\r\n        areYouSure={this.state.areYouSure}\r\n        deleteImminent={this.state.deleteImminent}\r\n      />\r\n    );\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.areYouSure && !prevState.deleteImminent) {\r\n      clearTimeout(this.t);\r\n    } else if (prevState.deleteImminent) {\r\n      clearTimeout(this.t);\r\n    };\r\n  }\r\n};\r\n\r\nPlaylistContainer.propTypes = {\r\n  tracks: PropTypes.array.isRequired,\r\n  playlistName: PropTypes.string.isRequired,\r\n  handleListNameChange: PropTypes.func.isRequired,\r\n  removeTrack: PropTypes.func.isRequired,\r\n  savePlaylist: PropTypes.func.isRequired,\r\n  playTrack: PropTypes.func.isRequired,\r\n  pauseTrack: PropTypes.func.isRequired,\r\n  isTrackPlayed: PropTypes.bool.isRequired,\r\n  clearPlaylist: PropTypes.func.isRequired,\r\n  isCurrentPlaylistOnList: PropTypes.bool.isRequired,\r\n  isSavedPlaylistAltered: PropTypes.bool.isRequired,\r\n  removePlaylist: PropTypes.func\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AppComp.css';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport PlaylistContainer from '../../containers/PlaylistContainer';\r\n\r\nexport default function AppComp(props) {\r\n    const { playlistTracks, searchTracks, searchPhrase, handleSearchChange, playlistName, handleListNameChange, addTrack, removeTrack, search, savePlaylist, playTrack, pauseTrack, isTrackPlayed, playlists, clearPlaylist, removePlaylist, isCurrentPlaylistOnList, hasCheckedForPlaylists, getPlaylistDetails, isSavedPlaylistAltered } = props;\r\n    return (\r\n        <div>\r\n            <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n            <div className=\"App\">\r\n                <SearchBar \r\n                    searchPhrase={searchPhrase}\r\n                    handleSearchChange={handleSearchChange}\r\n                    handleClick={search}\r\n                    playlists={playlists}\r\n                    hasCheckedForPlaylists={hasCheckedForPlaylists}                    \r\n                />\r\n                <div className=\"App-playlist\">\r\n                    <SearchResults \r\n                        tracks={searchTracks}\r\n                        addTrack={addTrack}\r\n                        playTrack={playTrack}\r\n                        pauseTrack={pauseTrack}\r\n                        isTrackPlayed={isTrackPlayed}\r\n                        playlists={playlists}\r\n                        removePlaylist={removePlaylist}\r\n                        hasCheckedForPlaylists={hasCheckedForPlaylists}\r\n                        getPlaylistDetails={getPlaylistDetails}\r\n                        isCurrentPlaylistOnList={isCurrentPlaylistOnList}\r\n                        isSavedPlaylistAltered={isSavedPlaylistAltered}\r\n                    />\r\n                    <PlaylistContainer\r\n                        tracks={playlistTracks}\r\n                        playlistName={playlistName}\r\n                        handleListNameChange={handleListNameChange}\r\n                        removeTrack={removeTrack}\r\n                        savePlaylist={savePlaylist}\r\n                        playTrack={playTrack}\r\n                        pauseTrack={pauseTrack} \r\n                        isTrackPlayed={isTrackPlayed}\r\n                        clearPlaylist={clearPlaylist}\r\n                        isCurrentPlaylistOnList={isCurrentPlaylistOnList}\r\n                        isSavedPlaylistAltered={isSavedPlaylistAltered}\r\n                        removePlaylist={removePlaylist}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nAppComp.propTypes = {\r\n    playlistTracks: PropTypes.array.isRequired,\r\n    searchTracks: PropTypes.array.isRequired,\r\n    searchPhrase: PropTypes.string.isRequired,\r\n    handleSearchChange: PropTypes.func.isRequired,\r\n    playlistName: PropTypes.string.isRequired,\r\n    handleListNameChange: PropTypes.func.isRequired,\r\n    addTrack: PropTypes.func,\r\n    removeTrack: PropTypes.func,\r\n    search: PropTypes.func.isRequired,\r\n    savePlaylist: PropTypes.func.isRequired,\r\n    playTrack: PropTypes.func.isRequired,\r\n    pauseTrack: PropTypes.func.isRequired,\r\n    isTrackPlayed: PropTypes.bool.isRequired,\r\n    playlists: PropTypes.array.isRequired,\r\n    clearPlaylist: PropTypes.func.isRequired,\r\n    removePlaylist: PropTypes.func.isRequired,\r\n    isCurrentPlaylistOnList: PropTypes.bool.isRequired,\r\n    hasCheckedForPlaylists: PropTypes.bool.isRequired,\r\n    getPlaylistDetails: PropTypes.func.isRequired,\r\n    isSavedPlaylistAltered: PropTypes.bool.isRequired\r\n}\r\n","const Spotify = {\r\n    clientId: process.env.REACT_APP_USER_ID,\r\n    accessToken: '',\r\n    tokenExpiry: null,\r\n    redirectURI: process.env.REACT_APP_REDIRECT_URI,\r\n    generateURLState() {\r\n        sessionStorage.urlState = Math.floor(Math.random() * 100000).toString();\r\n    },\r\n    getAccessToken() {\r\n        if (window.location.href.match(/state=(\\d+)/)[1] === sessionStorage.urlState) {\r\n            this.accessToken = window.location.href.match(/access_token=([^&]+)/)[1];\r\n            this.tokenExpiry = window.location.href.match(/expires_in=([^&]+)/)[1];\r\n            const tokenExpiryDate = Date.now() + (this.tokenExpiry * 1000);\r\n            window.history.pushState('AccessToken', null, '/Jammming');\r\n            setTimeout(() => (this.accessToken = ''), tokenExpiryDate - Date.now());\r\n        }\r\n    },\r\n    getUserId(){\r\n        const url = `https://api.spotify.com/v1/me`;\r\n        return fetch(url, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.accessToken}`\r\n            }\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).then(jsonResponse => jsonResponse.id);  \r\n    },\r\n    getUserPlaylists() {\r\n        const url = `https://api.spotify.com/v1/me/playlists`\r\n        return fetch(url, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.accessToken}`\r\n            }\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        });\r\n    },\r\n    getPlaylistDetails(playlistId) {\r\n        const url = `https://api.spotify.com/v1/playlists/${playlistId}`;\r\n        return fetch(url, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.accessToken}`\r\n            }\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        });\r\n    },\r\n    createPlaylist(userId, playlistName){\r\n        const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\r\n        const jsonBody = JSON.stringify({\r\n            name: playlistName\r\n        });\r\n        return fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.accessToken}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: jsonBody\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        });\r\n    },\r\n    addPlaylist(playlistName, uriArr) {\r\n        if (!this.accessToken) {\r\n            this.generateURLState();\r\n            this.spotifyLogin(sessionStorage.urlState);\r\n        } else {\r\n            return this.getUserId().then(response => {\r\n                return this.createPlaylist(response, playlistName)\r\n            }).then(response => {\r\n                const playlistId = response.id;\r\n                const url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\r\n                const jsonBody = JSON.stringify({\r\n                    uris: uriArr\r\n                });\r\n                return fetch(url, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Authorization\": `Bearer ${this.accessToken}`,\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: jsonBody\r\n                });\r\n            }).then(response => {\r\n                if (response.ok){\r\n                    return response.json();\r\n                }\r\n            });\r\n        };        \r\n    },\r\n    removePlaylist(playlistId) {\r\n        const url = `https://api.spotify.com/v1/playlists/${playlistId}/followers`;\r\n        return fetch(url, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.accessToken}`\r\n            }\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            }\r\n        });\r\n    },\r\n    updatePlaylist(playlistName, uriArr, playlistId) {\r\n        if (!this.accessToken) {\r\n            this.generateURLState();\r\n            this.spotifyLogin(sessionStorage.urlState);\r\n        } else {\r\n            const url1 = `https://api.spotify.com/v1/playlists/${playlistId}`;\r\n            const url2 = `${url1}/tracks`;\r\n            return fetch(url1, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${this.accessToken}`,\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    name: playlistName\r\n                })\r\n            }).then(response => {\r\n                if (response.ok) {\r\n                    return fetch(url2, {\r\n                        method: 'PUT',\r\n                        headers: {\r\n                            \"Authorization\": `Bearer ${this.accessToken}`,\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify({\r\n                            uris: uriArr\r\n                        })\r\n                    });\r\n                };\r\n            }).then(response => {\r\n                if (response.ok) {\r\n                    return response;\r\n                }\r\n            });\r\n        };\r\n    },\r\n    spotifyLogin(urlState) {\r\n        const url = `https://accounts.spotify.com/authorize?client_id=${this.clientId}&response_type=token&redirect_uri=${encodeURIComponent(this.redirectURI)}&state=${urlState}&scope=playlist-modify-public`;\r\n        if (!this.accessToken) {\r\n            window.location.href = url;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }  \r\n    },\r\n    search(phrase) {\r\n        if (phrase) {\r\n            const url = `https://api.spotify.com/v1/search?q=${encodeURIComponent(phrase)}&type=track`;\r\n            return fetch(url, {\r\n                headers: {\r\n                \"Authorization\": `Bearer ${this.accessToken}`\r\n                }\r\n            }).then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }   \r\n            }).then(jsonResponse => {\r\n                const items = jsonResponse.tracks.items;\r\n                return items;\r\n            });\r\n        };        \r\n    }\r\n}\r\n\r\nexport default Spotify;\r\n","import React from 'react';\nimport AppComp from '../components/AppComp/AppComp';\nimport Spotify from '../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {      \n      playlistTracks: [],\n      searchPhrase: '',\n      searchTracks: [],\n      playlistName: '',\n      isTrackPlayed: false,\n      playlists: [],\n      isCurrentPlaylistOnList: false,\n      hasCheckedForPlaylists: false,\n      isSavedPlaylistAltered: false\n    };\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleListNameChange = this.handleListNameChange.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.search = this.search.bind(this);\n    this.handleSearchResponse = this.handleSearchResponse.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.playTrack = this.playTrack.bind(this);\n    this.pauseTrack = this.pauseTrack.bind(this);\n    this.clearPlaylist = this.clearPlaylist.bind(this);\n    this.getPlaylists = this.getPlaylists.bind(this);\n    this.removePlaylist = this.removePlaylist.bind(this);\n    this.getPlaylistDetails = this.getPlaylistDetails.bind(this);\n    this.handlePlaylistDetails = this.handlePlaylistDetails.bind(this);\n  }\n  handleSearchChange({target}) {\n    this.setState({\n      searchPhrase: target.value\n    })\n  }\n  search() {\n    Spotify.generateURLState();\n    sessionStorage.searchPhrase = this.state.searchPhrase;\n    sessionStorage.playlistName = this.state.playlistName;\n    sessionStorage.playlistTracks = JSON.stringify(this.state.playlistTracks);\n    const needsLogging = Spotify.spotifyLogin(sessionStorage.urlState);\n    if (!needsLogging && this.state.searchPhrase) {\n      Spotify.search(this.state.searchPhrase).then(response => this.handleSearchResponse(response));\n      this.getPlaylists();\n    } else if (!needsLogging && !this.state.searchPhrase) {\n      this.getPlaylists();\n    }\n  }\n  handleSearchResponse(response) {\n    const searchTracks = response.map(track => ({\n      title: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      id: track.id,\n      URI: track.uri,\n      preview: track.preview_url,\n      doubledInPlaylist: false,\n      url: track.external_urls.spotify,\n      artistUrl: track.artists[0].external_urls.spotify,\n      albumUrl: track.album.external_urls.spotify\n    }));\n    const searchTracksFiltered = searchTracks.filter(track => (!this.state.playlistTracks.map(plTrack => plTrack.id).includes(track.id)));\n    this.setState({\n      searchTracks: searchTracksFiltered,\n      searchPhrase: '',\n      isTrackPlayed: false\n    });\n  }\n  handleListNameChange({target}) {\n    this.setState({\n      playlistName: target.value\n    })\n  }\n  handlePlaylistDetails(response) {\n    const playlistName = response.name;\n    const playlistTracks = response.tracks.items.map(item => ({\n      title: item.track.name,\n      artist: item.track.artists[0].name,\n      album: item.track.album.name,\n      id: item.track.id,\n      URI: item.track.uri,\n      doubledInPlaylist: true,\n      preview: item.track.preview_url,\n      url: item.track.external_urls.spotify,\n      artistUrl: item.track.artists[0].external_urls.spotify,\n      albumUrl: item.track.album.external_urls.spotify\n    }));\n    const trackArr = this.state.searchTracks;\n    if (trackArr.length > 0) {\n      const idArr = trackArr.map(track => track.id);\n      trackArr.forEach(track => {\n        track.doubledInPlaylist = false;\n      });\n      playlistTracks.forEach(playlistTrack => {\n        console.log(playlistTrack);\n        const index = idArr.indexOf(playlistTrack.id);\n        if (index > -1) {\n          trackArr[index].doubledInPlaylist = true;\n        };        \n      });\n    };    \n    this.setState({\n      playlistName: playlistName,\n      playlistTracks: playlistTracks,\n      searchTracks: trackArr,\n      isCurrentPlaylistOnList: true\n    });\n  }\n  getPlaylists() {\n    if (!this.state.isCurrentPlaylistOnList) {\n      Spotify.getUserPlaylists().then(response => {\n        const playlists = response.items.map(item => {\n          return {\n            id: item.id,\n            name: item.name,\n            tracks: item.tracks.total,\n            images: item.images,\n            viewedInDetail: false,\n            url: item.external_urls.spotify\n          }\n        });\n        this.setState({\n          playlists: playlists,\n          hasCheckedForPlaylists: true\n        })\n      });\n    };    \n  }\n  savePlaylist() {\n    const uriArr = this.state.playlistTracks.map(track => track.URI);    \n    if (uriArr.length > 0 ) {\n      sessionStorage.uriArr = JSON.stringify(uriArr);\n      sessionStorage.playlistName = this.state.playlistName;\n      sessionStorage.playlistTracks = JSON.stringify(this.state.playlistTracks);\n      if (this.state.isCurrentPlaylistOnList) {\n        const playlistArr = this.state.playlists;\n        const editedPlaylistId = playlistArr.filter(playlist => playlist.viewedInDetail)[0].id;\n        sessionStorage.editedPlaylistId = editedPlaylistId\n        Spotify.updatePlaylist(sessionStorage.playlistName, JSON.parse(sessionStorage.uriArr), sessionStorage.editedPlaylistId).then(() => {\n          sessionStorage.editedPlaylistId = '';\n          this.getPlaylists();\n          this.clearPlaylist();\n        });\n      } else {\n        Spotify.addPlaylist(sessionStorage.playlistName, JSON.parse(sessionStorage.uriArr)).then(() => {\n          this.getPlaylists();\n          this.clearPlaylist();\n        });\n      };\n    };\n  }\n  clearPlaylist() {\n    this.setState({\n      playlistTracks: [],\n      playlistName: '',\n      searchPhrase: sessionStorage.searchPhrase,\n      isCurrentPlaylistOnList: false,\n      isSavedPlaylistAltered: false\n    }, () => {\n      this.search();\n    });\n  }\n  removePlaylist(playlistToRemove) {\n    if (playlistToRemove === 'current') {\n      Spotify.generateURLState();\n      const playlistArr = this.state.playlists;\n      const playlistToDeleteId = playlistArr.filter(playlist => playlist.viewedInDetail)[0].id;\n      sessionStorage.playlistToDeleteId = playlistToDeleteId;\n      sessionStorage.searchTracks = JSON.stringify(this.state.searchTracks);\n      sessionStorage.playlistName = this.state.playlistName;\n      sessionStorage.playlistTracks = JSON.stringify(this.state.playlistTracks);\n      const needsLogging = Spotify.spotifyLogin(sessionStorage.urlState);\n      if (!needsLogging) {\n        Spotify.removePlaylist(sessionStorage.playlistToDeleteId).then(() => {\n          this.clearPlaylist();\n        });\n        sessionStorage.playlistToDeleteId = '';\n        sessionStorage.searchTracks = [];\n      };\n    } else {\n      Spotify.generateURLState();\n      sessionStorage.playlistToRemoveId = playlistToRemove.id;\n      sessionStorage.searchTracks = JSON.stringify(this.state.searchTracks);\n      sessionStorage.playlistName = this.state.playlistName;\n      sessionStorage.playlistTracks = JSON.stringify(this.state.playlistTracks);\n      const needsLogging = Spotify.spotifyLogin(sessionStorage.urlState);\n      if (!needsLogging) {\n        Spotify.removePlaylist(sessionStorage.playlistToRemoveId).then(() => {\n          this.getPlaylists();\n        });\n        sessionStorage.playlistToRemoveId = '';\n        sessionStorage.searchTracks = [];\n      };\n    };      \n  }\n  getPlaylistDetails(playlistToEdit) {\n    const playlistsArr = this.state.playlists;\n    const idArr = playlistsArr.map(item => item.id);\n    const index = this.state.playlists.indexOf(playlistToEdit);    \n    const oldEditedPlaylistArr = playlistsArr.filter(playlist => playlist.viewedInDetail);\n    if (oldEditedPlaylistArr.length > 0) {\n      const id = oldEditedPlaylistArr[0].id;\n      const oldIndex = idArr.indexOf(id);\n      playlistsArr[oldIndex].viewedInDetail = false;\n    }\n    playlistsArr[index].viewedInDetail = true;\n    this.setState({\n      playlists: playlistsArr\n    }, () => {\n      Spotify.generateURLState();\n      sessionStorage.playlistToEditId = playlistToEdit.id;\n      sessionStorage.searchTracks = JSON.stringify(this.state.searchTracks);\n      const needsLogging = Spotify.spotifyLogin(sessionStorage.urlState);\n      if (!needsLogging) {\n        Spotify.getPlaylistDetails(sessionStorage.playlistToEditId).then(response => this.handlePlaylistDetails(response));\n        sessionStorage.playlistToEditId = '';\n        sessionStorage.searchTracks = [];\n      };    \n    });    \n  }\n  addTrack(trackToAdd) {\n    if (!this.state.playlistTracks.map(track => track.id).includes(trackToAdd.id)) {\n      const trackArr = this.state.searchTracks;\n      const idArr = trackArr.map(track => track.id);\n      const index = idArr.indexOf(trackToAdd.id);\n      trackArr[index].doubledInPlaylist = true;\n      trackToAdd.doubledInPlaylist = true;\n      this.setState(prev => ({\n        searchTracks: trackArr,\n        playlistTracks: [...prev.playlistTracks, trackToAdd]\n      }));\n      if (this.state.isCurrentPlaylistOnList) {\n        this.setState({\n          isSavedPlaylistAltered: true\n        })\n      };\n    };    \n  }\n  playTrack(track) {\n    if (!this.state.isTrackPlayed) {\n      this.setState({\n        isTrackPlayed: true\n      }, () => {\n        document.getElementById(track.id).play();\n      })\n    }\n  }\n  pauseTrack(track) {\n    if (this.state.isTrackPlayed) {\n      this.setState({\n        isTrackPlayed: false\n      }, () => {\n        document.getElementById(track.id).pause();\n      })\n    } else if (track !== null) {\n      document.getElementById(track.id).pause();\n    };\n  }\n  removeTrack(trackToRemove) {\n    const searchArr = this.state.searchTracks;\n    const idArr = searchArr.map(track => track.id);\n    const updatedPlaylistTracks = this.state.playlistTracks.filter(track => track.id !== trackToRemove.id);\n    if (idArr.includes(trackToRemove.id)) {\n      const index = idArr.indexOf(trackToRemove.id);\n      searchArr[index].doubledInPlaylist = false;\n      this.setState({\n        searchTracks: searchArr,\n        playlistTracks: updatedPlaylistTracks\n      })\n    } else {\n      this.setState({\n        playlistTracks: updatedPlaylistTracks\n      });\n    };\n    if (this.state.isCurrentPlaylistOnList) {\n      this.setState({\n        isSavedPlaylistAltered: true\n      })\n    };        \n  }\n  render() {\n    return (\n      <AppComp\n        playlistTracks={this.state.playlistTracks}\n        searchTracks={this.state.searchTracks} \n        searchPhrase={this.state.searchPhrase}\n        handleSearchChange={this.handleSearchChange}\n        playlistName={this.state.playlistName}\n        handleListNameChange={this.handleListNameChange}\n        addTrack={this.addTrack}\n        removeTrack={this.removeTrack}\n        search={this.search}\n        savePlaylist={this.savePlaylist}\n        playTrack={this.playTrack}\n        pauseTrack={this.pauseTrack}\n        isTrackPlayed={this.state.isTrackPlayed}\n        playlists={this.state.playlists}\n        clearPlaylist={this.clearPlaylist}\n        removePlaylist={this.removePlaylist}\n        isCurrentPlaylistOnList={this.state.isCurrentPlaylistOnList}\n        hasCheckedForPlaylists={this.state.hasCheckedForPlaylists}\n        getPlaylistDetails={this.getPlaylistDetails}\n        isSavedPlaylistAltered={this.state.isSavedPlaylistAltered}\n      />\n    );\n  }\n  componentDidMount() {\n    if (window.location.href.match(/access_token=/))  {\n      Spotify.getAccessToken();\n      this.setState({\n        searchPhrase: sessionStorage.searchPhrase,\n        searchTracks: ((!sessionStorage.searchPhrase && sessionStorage.searchTracks) ? JSON.parse(sessionStorage.searchTracks) : []),\n        playlistName: sessionStorage.playlistName,\n        playlistTracks: JSON.parse(sessionStorage.playlistTracks)\n      }, () => {\n        this.getPlaylists();\n        if (this.state.searchPhrase) {\n          Spotify.search(this.state.searchPhrase).then(response => this.handleSearchResponse(response));\n        };\n        if (sessionStorage.playlistToRemoveId) {\n          Spotify.removePlaylist(sessionStorage.playlistToRemoveId).then(() => {\n            this.getPlaylists();\n          });\n          sessionStorage.playlistToRemoveId = '';\n          sessionStorage.searchTracks = [];\n        };\n        if (sessionStorage.playlistToDeleteId) {\n          Spotify.removePlaylist(sessionStorage.playlistToDeleteId).then(() => {\n            this.clearPlaylist();\n          });\n          sessionStorage.playlistToDeleteId = '';\n          sessionStorage.searchTracks = [];\n        }\n        if (sessionStorage.playlistToEditId) {\n          Spotify.getPlaylistDetails(sessionStorage.playlistToEditId).then(response => this.handlePlaylistDetails(response));\n          sessionStorage.playlistToEditId = '';\n          sessionStorage.searchTracks = [];\n        };\n        if (sessionStorage.editedPlaylistId) {\n          Spotify.updatePlaylist(sessionStorage.playlistName, JSON.parse(sessionStorage.uriArr), sessionStorage.editedPlaylistId).then(() => {\n            sessionStorage.editedPlaylistId = '';\n            this.getPlaylists();\n            this.clearPlaylist();\n          });\n        }\n      });\n    }\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}