{"version":3,"sources":["components/SearchBar/SearchBar.js","components/Track/Track.js","containers/TrackContainer/TrackContainer.js","components/TrackList/TrackList.js","components/SearchResult/SearchResults.js","components/Playlist/Playlist.js","components/AppComp/AppComp.js","util/Spotify.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","searchPhrase","handleSearchChange","handleClick","className","placeholder","value","onChange","onClick","Track","track","isInPlaylist","title","artist","album","TrackContainer","bind","this","removeTrack","addTrack","React","Component","TrackList","tracks","map","key","id","SearchResults","Playlist","playlistName","handleListNameChange","AppComp","playlistTracks","searchTracks","search","addPlaylist","Spotify","clientId","accessToken","tokenExpiry","redirectURI","generateURLState","sessionStorage","urlState","Math","floor","random","toString","getAccessToken","window","location","href","match","history","pushState","setTimeout","getUserId","fetch","headers","then","response","ok","json","jsonResponse","getUserPlaylists","console","log","createPlaylist","userId","url","jsonBody","JSON","stringify","name","method","body","uriArr","playlistId","uris","spotifyLogin","encodeURIComponent","phrase","items","App","state","handleSearchResponse","target","setState","artists","URI","uri","trackToAdd","includes","prev","trackToRemove","updatedPlaylistTracks","filter","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d4f3e4bd.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SearchBar.css';\r\n\r\nexport default function SearchBar(props) {\r\n    const { searchPhrase, handleSearchChange, handleClick } = props;\r\n    return (\r\n        <div className=\"SearchBar\">\r\n            <input \r\n                placeholder=\"Enter A Song, Album, or Artist\" \r\n                value={searchPhrase}\r\n                onChange={handleSearchChange}\r\n            />\r\n            <button className=\"SearchButton\" onClick={handleClick}>SEARCH</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n    searchPhrase: PropTypes.string.isRequired,\r\n    handleSearchChange: PropTypes.func.isRequired,\r\n    handleClick: PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Track.css';\r\n\r\nexport default function Track(props) {\r\n    const { track, isInPlaylist, handleClick } = props;\r\n    return (\r\n        <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n                <h3>{track.title}</h3>\r\n                <p>{track.artist} | {track.album}</p>\r\n            </div>\r\n            <button className=\"Track-action\" onClick={handleClick}>{isInPlaylist ? '-' : '+'}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nTrack.propTypes = {\r\n    track: PropTypes.object.isRequired,\r\n    isInPlaylist: PropTypes.bool.isRequired,\r\n    handleClick: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Track from '../../components/Track/Track';\r\n\r\nexport default class TrackContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    handleClick() {\r\n        if (!this.props.isInPlaylist) {\r\n            this.props.addTrack(this.props.track);\r\n        } else {\r\n            this.props.removeTrack(this.props.track);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Track \r\n                track={this.props.track}\r\n                isInPlaylist={this.props.isInPlaylist}\r\n                handleClick={this.handleClick}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nTrackContainer.propTypes = {\r\n    addTrack: PropTypes.func,\r\n    isInPlaylist: PropTypes.bool.isRequired,\r\n    track: PropTypes.object.isRequired,\r\n    removeTrack: PropTypes.func\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './TrackList.css';\r\nimport TrackContainer from '../../containers/TrackContainer/TrackContainer';\r\n\r\nexport default function TrackList(props) {\r\n    const { tracks, isInPlaylist, addTrack, removeTrack } = props;\r\n    return (\r\n        <div className=\"TrackList\">\r\n            {tracks.map(track => {\r\n                return <TrackContainer\r\n                    track={track}                    \r\n                    key={track.id}                    \r\n                    isInPlaylist={isInPlaylist}\r\n                    addTrack={addTrack}\r\n                    removeTrack={removeTrack}\r\n                />\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nTrackList.propTypes = {\r\n    tracks: PropTypes.array,\r\n    isInPlaylist: PropTypes.bool.isRequired,\r\n    addTrack: PropTypes.func,\r\n    removeTrack: PropTypes.func\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nexport default function SearchResults(props) {\r\n    const { tracks, addTrack } = props;\r\n    return (\r\n        <div className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <TrackList \r\n                tracks={tracks}\r\n                isInPlaylist={false}\r\n                addTrack={addTrack}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nSearchResults.propTypes = {\r\n    tracks: PropTypes.array.isRequired,\r\n    addTrack: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nexport default function Playlist(props) {\r\n    const { tracks, playlistName, handleListNameChange, removeTrack, handleClick } = props;\r\n    return (\r\n        <div className=\"Playlist\">\r\n            <input \r\n                value={playlistName} \r\n                onChange={handleListNameChange}\r\n            />\r\n            <TrackList\r\n                tracks={tracks}\r\n                isInPlaylist={true}\r\n                removeTrack={removeTrack} \r\n            />\r\n            <button className=\"Playlist-save\" onClick={handleClick}>SAVE TO SPOTIFY</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nPlaylist.propTypes = {\r\n    tracks: PropTypes.array.isRequired,\r\n    playlistName: PropTypes.string.isRequired,\r\n    handleListNameChange: PropTypes.func.isRequired,\r\n    removeTrack: PropTypes.func.isRequired,\r\n    handleClick: PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AppComp.css';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResult/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\n\r\nexport default function AppComp(props) {\r\n    const { playlistTracks, searchTracks, searchPhrase, handleSearchChange, playlistName, handleListNameChange, addTrack, removeTrack, search, addPlaylist } = props;\r\n    return (\r\n        <div>\r\n            <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n            <div className=\"App\">\r\n                <SearchBar \r\n                    searchPhrase={searchPhrase}\r\n                    handleSearchChange={handleSearchChange}\r\n                    handleClick={search}\r\n                />\r\n                <div className=\"App-playlist\">\r\n                    <SearchResults \r\n                        tracks={searchTracks}\r\n                        addTrack={addTrack}\r\n                    />\r\n                    <Playlist\r\n                        tracks={playlistTracks}\r\n                        playlistName={playlistName}\r\n                        handleListNameChange={handleListNameChange}\r\n                        removeTrack={removeTrack}\r\n                        handleClick={addPlaylist} \r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nAppComp.propTypes = {\r\n    playlistTracks: PropTypes.array.isRequired,\r\n    searchTracks: PropTypes.array.isRequired,\r\n    searchPhrase: PropTypes.string.isRequired,\r\n    handleSearchChange: PropTypes.func.isRequired,\r\n    playlistName: PropTypes.string.isRequired,\r\n    handleListNameChange: PropTypes.func.isRequired,\r\n    addTrack: PropTypes.func,\r\n    removeTrack: PropTypes.func,\r\n    search: PropTypes.func.isRequired,\r\n    addPlaylist: PropTypes.func.isRequired\r\n}\r\n","const Spotify = {\r\n    clientId: '20ad80ca3acb46a3ac4dfbfa29dfe2c7',\r\n    accessToken: '',\r\n    tokenExpiry: null,\r\n    redirectURI: 'https://pyll-o.github.io/Jammming',\r\n    generateURLState() {\r\n        sessionStorage.urlState = Math.floor(Math.random() * 100000).toString();\r\n    },\r\n    getAccessToken() {\r\n        if (window.location.href.match(/state=(\\d+)/)[1] === sessionStorage.urlState) {\r\n            this.accessToken = window.location.href.match(/access_token=([^&]+)/)[1];\r\n            this.tokenExpiry = window.location.href.match(/expires_in=([^&]+)/)[1];\r\n            window.history.pushState('AccessToken', null, '/');\r\n            setTimeout(() => (this.accessToken = ''), this.tokenExpiry * 1000);\r\n        }\r\n    },\r\n    getUserId(){\r\n        const url = `https://api.spotify.com/v1/me`;\r\n        return fetch(url, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.accessToken}`\r\n            }\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).then(jsonResponse => jsonResponse.id);  \r\n    },\r\n    getUserPlaylists() {\r\n        const url = `https://api.spotify.com/v1/me/playlists`\r\n        fetch(url, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.accessToken}`\r\n            }\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).then(jsonResponse => console.log(jsonResponse));\r\n    },\r\n    createPlaylist(userId, playlistName){\r\n        const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\r\n        const jsonBody = JSON.stringify({\r\n            name: playlistName\r\n        });\r\n        return fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.accessToken}`,\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: jsonBody\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        });\r\n    },\r\n    addPlaylist(playlistName, uriArr) {\r\n        if (!this.accessToken) {\r\n            this.generateURLState();\r\n            this.spotifyLogin(sessionStorage.urlState);\r\n        } else {\r\n            this.getUserId().then(response => {\r\n                return this.createPlaylist(response, playlistName)\r\n            }).then(response => {\r\n                console.log(response);\r\n                const playlistId = response.id;\r\n                const url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\r\n                const jsonBody = JSON.stringify({\r\n                    uris: uriArr\r\n                });\r\n                return fetch(url, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Authorization\": `Bearer ${this.accessToken}`,\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: jsonBody\r\n                });\r\n            }).then(response => {\r\n                if (response.ok){\r\n                    return response.json();\r\n                }\r\n            }).then(jsonResponse => console.log(jsonResponse));\r\n        };        \r\n    },\r\n    spotifyLogin(urlState) {\r\n        const url = `https://accounts.spotify.com/authorize?client_id=${this.clientId}&response_type=token&redirect_uri=${encodeURIComponent(this.redirectURI)}&state=${urlState}&scope=playlist-modify-public`;\r\n        if (!this.accessToken) {\r\n            window.location.href = url;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }  \r\n    },\r\n    search(phrase) {\r\n        const url = `https://api.spotify.com/v1/search?q=${encodeURIComponent(phrase)}&type=track`;\r\n        return fetch(url, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.accessToken}`\r\n            }\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        }).then(jsonResponse => {\r\n            const items = jsonResponse.tracks.items;\r\n            return items;\r\n        });\r\n    }\r\n}\r\n\r\nexport default Spotify;\r\n","import React from 'react';\nimport AppComp from '../../components/AppComp/AppComp';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {      \n      playlistTracks: [],\n      searchPhrase: '',\n      searchTracks: [],\n      playlistName: 'New Playlist',\n    };\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleListNameChange = this.handleListNameChange.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.search = this.search.bind(this);\n    this.handleSearchResponse = this.handleSearchResponse.bind(this);\n    this.addPlaylist = this.addPlaylist.bind(this);\n  }\n  handleSearchChange({target}) {\n    this.setState({\n      searchPhrase: target.value\n    })\n  }\n  search() {\n    Spotify.generateURLState();\n    sessionStorage.searchPhrase = this.state.searchPhrase;\n    const needsLogging = Spotify.spotifyLogin(sessionStorage.urlState);\n    if (!needsLogging) {\n      Spotify.search(this.state.searchPhrase).then(response => this.handleSearchResponse(response));\n    };    \n  }\n  handleSearchResponse(response) {\n    const searchTracks = response.map(track => ({\n      title: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      id: track.id,\n      URI: track.uri\n    }));\n    this.setState({\n      searchTracks: searchTracks,\n      searchPhrase: ''\n    });\n  }\n  handleListNameChange({target}) {\n    this.setState({\n      playlistName: target.value\n    })\n  }\n  addPlaylist() {\n    const uriArr = this.state.playlistTracks.map(track => track.URI);\n    Spotify.addPlaylist(this.state.playlistName, uriArr);\n  }\n  addTrack(trackToAdd) {\n    if (!this.state.playlistTracks.map(track => track.id).includes(trackToAdd.id)) {\n      this.setState(prev => ({\n        playlistTracks: [...prev.playlistTracks, trackToAdd]\n      }))\n    }    \n  }\n  removeTrack(trackToRemove) {\n    const updatedPlaylistTracks = this.state.playlistTracks.filter(track => track.id !== trackToRemove.id);\n    this.setState({\n      playlistTracks: updatedPlaylistTracks\n    })\n  }\n  render() {\n    return (\n      <AppComp\n        playlistTracks={this.state.playlistTracks}\n        searchTracks={this.state.searchTracks} \n        searchPhrase={this.state.searchPhrase}\n        handleSearchChange={this.handleSearchChange}\n        playlistName={this.state.playlistName}\n        handleListNameChange={this.handleListNameChange}\n        addTrack={this.addTrack}\n        removeTrack={this.removeTrack}\n        search={this.search}\n        addPlaylist={this.addPlaylist}\n      />\n    );\n  }\n  componentDidMount() {\n    if (window.location.href.match(/access_token=/))  {\n      Spotify.getAccessToken();\n      this.setState({searchPhrase: sessionStorage.searchPhrase}, () => {\n        if (this.state.searchPhrase) {\n          Spotify.search(this.state.searchPhrase).then(response => this.handleSearchResponse(response));\n        }\n      });\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}